name: My Ci Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show Docker and Compose versions
        run: |
          docker --version
          docker compose version
          docker info

      - name: Build Docker Compose services
        run: docker compose build

      - name: Verify Docker images exist
        run: |
          docker images
          for image in backend frontend db; do
            if ! docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^$image:"; then
              echo "Image $image not found!"
              exit 1
            fi
          done

      - name: Verify curl is installed
        run: |
          docker run --rm backend  curl --version
          docker run --rm frontend curl --version
          docker run --rm db       curl --version

      - name: Compile backend using Docker image
        run: |
          docker run --rm -v $PWD/backend:/app backend:latest /bin/bash -c 'cd /app && ./gradlew clean build -x test --no-daemon --info --stacktrace'
          ls -al
          ls -al backend/
          ls -al backend/build/
          ls -al backend/build/libs/

      - name: Fail if no JAR file is generated
        run: |
          if ! ls backend/build/libs/*.jar 1>/dev/null 2>&1; then
            echo "No JAR file found in backend/build/libs/"
            exit 1
          fi

      - name: Start Docker Compose services
        run: |
          docker compose up -d
          docker ps --filter "name=backend" --filter "name=frontend" --filter "name=db"

      - name: Health from backend container itself (after sleeping 15s)
        continue-on-error: true
        run: |
          sleep 15
          docker ps
          docker exec backend curl -s http://localhost:8082/health

#      - name: Health from the host machine
#        run: |
#          docker ps
#          curl -s http://localhost:8082/health
#
#      - name: Verify backend health endpoint
#        run: |
#          for i in {1..10}; do
#            docker exec backend curl -s http://localhost:8082/health
#            if docker exec backend curl -s http://localhost:8082/health | grep -q '"status":"UP"'; then
#              echo "Backend health is OK"
#              exit 0
#            else
#              echo "Waiting for backend to be healthy..."
#              sleep 3
#            fi
#          done
#          echo "Backend health check failed"
#          exit 1

      - name: Verify backend health endpoint
        continue-on-error: true
        run: |
          sleep 5
          curl -s http://localhost:8082/health | grep -q '"status":"UP"'

      - name: Run DB integration tests
        continue-on-error: true
        run: |
          docker compose down backend
          docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
          docker exec backend gradle clean build test --tests com.example.DatabaseIntegrationTest --warning-mode all
          
